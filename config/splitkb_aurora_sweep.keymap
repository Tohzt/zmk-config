/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping-term-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LALT>;
        };

        Semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <27 28>;
        };

        combo_lctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <22 23>;
        };

        combo_rctrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <26 27>;
        };

        game_mode {
            bindings = <&to 3>;
            key-positions = <2 1 3>;
        };

        default_mode {
            bindings = <&to 0>;
            key-positions = <6 7 8>;
        };
    };

    macros {
        debug_mode: debug_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp D &kp E &kp B &kp U &kp G &kp UNDER &kp M &kp O &kp D &kp E &kp EQUAL &kp T &kp R &kp U &kp E>;
            label = "DEBUG_MODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W          &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I      &kp O      &kp P
&kp A             &kp S          &kp D  &kp F  &kp G    &kp H  &kp J  &kp K      &kp L      &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X          &kp C  &kp V  &kp B    &kp N  &kp M  &kp COMMA  &kp DOT    &mt RIGHT_SHIFT RET
&mo 1             &kp BACKSPACE                                                  &kp SPACE  &mo 2
            >;
        };

        left_layer {
            bindings = <
&kp F1  &kp F4  &kp F7  &kp F10  &kp LC(X)    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS      &kp MINUS
&kp F2  &kp F5  &kp F8  &kp F11  &kp LC(C)    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp SLASH
&kp F3  &kp F6  &kp F9  &kp F12  &kp LC(V)    &kp N7        &kp N8        &kp N9        &kp N0        &kp ENTER
&mo 1   &tog 1                                                                          &kp SPACE     &kp BACKSPACE
            >;
        };

        right_layer {
            bindings = <
&debug_mode           &kp X      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LC(X)    &kp EQUAL       &kp MINUS        &kp ASTERISK  &kp SLASH   &kp LS(GRAVE)
&kp X                 &kp X      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LC(C)    &kp LEFT_ARROW  &kp DOWN_ARROW   &kp UP_ARROW  &kp RIGHT   &kp SQT
&mt LEFT_SHIFT ENTER  &kp X      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LC(V)    &kp SEMICOLON   &kp EXCLAMATION  &kp COMMA     &kp PERIOD  &mt RIGHT_SHIFT ENTER
&kp BACKSPACE         &kp SPACE                                                                                                           &tog 2      &mo 2
            >;
        };

        tri_layer {
            bindings = <
&kp TAB           &kp Q      &kp W  &kp E  &kp R    &kp T  &kp Y            &kp U            &kp I                              &kp O
&kp LEFT_SHIFT    &kp A      &kp S  &kp D  &kp F    &kp G  &kp H            &kp J            &kp K                              &kp L
&kp LEFT_CONTROL  &kp Z      &kp X  &kp C  &kp V    &kp B  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_COLOR_HSB(164,100,50)  &rgb_ug RGB_COLOR_HSB(277,90,49)
&kp M             &kp SPACE                                                                  &bl BL_TOG                         &bl BL_CYCLE
            >;
        };
    };
};
